{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"$license": "Based on https://github.com/dan-c-underwood/vscode-arm/blob/master/syntaxes/arm.tmlanguage.json. Licensed under the MIT License. Copyright (c) 2022 Dan Underwood, Ondřej Ondryáš.",
	"scopeName": "source.arm-ual",
	"name": "Arm UAL",
	"fileTypes": [
		"s",
		"S"
	],
	"patterns": [
		{
			"match": "^\\s*[#\\.](define|include|(end|el|else)?if|if(def|ndef)?|else)(\\s+(defined\\(\\w+\\)|\\w+)(\\s+(&&|\\|\\|)\\s+defined\\(\\w+\\)|\\w]+)*)?\\b",
			"name": "meta.preprocessor"
		},
		{
			"match": "^\\s*\\.?\\w+:\\s*(?=$|;)",
			"name": "routine.arm-ual"
		},
		{
			"match": "\\b(?i)(?:TSB CSYNC|SHADD16|SHSUB16|SXTAB16|UHADD16|UHSUB16|UQADD16|UQSUB16|UXTAB16|CRC32C|QADD16|QSUB16|SADD16|SETEND|SETPAN|SHADD8|SHSUB8|SMLSLD(?:X)?|SSAT16|SSUB16|STLEXB|STLEXD|STLEXH|SXTB16|UADD16|UHADD8|UHSUB8|UQADD8|UQSUB8|USADA8|USAT16|USUB16|UXTB16|CLREX|CRC32|DCPS1|DCPS2|DCPS3|PKHBT(?:)?|PSSBB|QADD8|QDADD|QDSUB|QSUB8|REV16|REVSH|SADD8|SHASX|SHSAX|SMLSD(?:X)?|SMMUL(?:R)?|SMUAD(?:X)?|SMUSD(?:X)?|SSUB8|STLEX|SXTAB|SXTAH|UADD8|UHASX|UHSAX|UMAAL|UMLALS?|UMULLS?|UQASX|UQSAX|USAD8|USUB8|UXTAB|UXTAH|YIELD|BKPT|CSDB|ERET|MCRR|MOVT|MRRC|PUSH|QADD|QASX|QSAX|QSUB|RBIT|SASX|SBFX|SDIV|SEVL|SSAT|SSAX|SSBB|STLB|STLH|SXTB|SXTH|UASX|UBFX|UDIV|USAT|USAX|UXTB|UXTH|ADCS?|ADDS?|ADR|ANDS?|ASRS?|BFC|BFI|BICS?|BLX|BXJ|CLZ|CMN|CMP|CPS(?:ID|IE)?|DBG|DMB|DSB|EORS?|ESB|HLT|HVC|ISB|LDA(?:B|EX|EXB|EXD|EXH|H)?|LDC|LDM(?:IA|FD|DA|DB|IB|FA|EA|ED)?|LDR(?:B|BT|D|EX|EXB|EXD|EXH|H|HT|SB|SBT|SH|SHT|T)?|LSLS?|LSRS?|MCR|MLAS?|MLS|MOVS?|MRC|MRS|MSR|MULS?|MVNS?|NOP|ORNS?|ORRS?|PLD(?:W)?|PLI|POP|REV|RFE(?:DA|DB|IA|IB)?|RORS?|RRXS?|RSB(?:S)?|RSC(?:S)?|SBC(?:S)?|SEL|SEV|SMC|SRS(?:DA|DB|IA|IB)?|STC|STL|STM(?:IA|EA|DA|DB|IB)?|STR(?:B|BT|D|EX|EXB|EXD|EXH|H|HT|T)?|SUB(?:S)?|SVC|TBB(?:)?|TEQ|TST|UDF|WFE|WFI|BL(?:X)?|BX|CB(?:NZ|Z)?|IT|SB|B|SMLA(?:BB|BT|TB|TT|DX|D|LS|L|LBB|LBT|LTB|LTT|LD|LDX|WB|WT)|SMUL(?:BB|BT|TB|TT|LS|L|WT|WB)|SMML(?:AR|A|SR|S))(\\w{2})?(?-i)\\b",
			"name": "support.function.mnemonic.arm-ual",
			"captures": {
				"1": {
					"name": "keyword.condition_code.arm-ual",
					"patterns": [
						{
							"include": "#conditions"
						}
					]
				}
			}
		},
		{
			"match": "\\b(?i)(?:SHA256SU(?:0|1)|SHA256H(?:2)?|SHA1SU(?:0|1)|VQDMUL(?:H|L)|VQRDML(?:AH|SH)|VQRSHR(?:N|UN)|VRSQRT(?:E|S)|VPADD(?:L)?|VQDML(?:AL|SL)|VQMOV(?:N|UN)|VQRDM(?:ULH)|VQRSH(?:L)|VQSHL(?:U)?|VQSHR(?:N|UN)|VRECP(?:E|S)|VRINT(?:A|M|N|P|R|X|Z)|VRSHR(?:N)?|VSELG(?:E|T)|FLDM(?:DBX|IAX)|FSTM(?:DBX|IAX)|SHA1(?:C|H|M|P)|VABA(?:L)?|VABD(?:L)?|VACG(?:E|T)|VACL(?:E|T)|VADD(?:HN|L|W)?|VCMP(?:E)?|VCVT(?:A|B|M|N|P|R|T)?|VFMA(?:B|T|L)?|VFMS(?:L)?|VFNM(?:A|S)|VLDM(?:DB|IA)?|VMAX(?:NM)?|VMIN(?:NM)?|VMLA(?:L)?|VMLS(?:L)?|VMOV(?:L|N|X)?|VMUL(?:L)?|VNML(?:A|S)|VPAD(?:AL)|VREV(?:16|32|64)|VRSH(?:L)|VSEL(?:EQ|VS)|VSHL(?:L)?|VSHR(?:N)?|VSTM(?:DB|IA)?|VSUB(?:HN|L|W)?|AES(?:D|E|IMC|MC)|VAB(?:S)|VBI(?:C|F|T)|VCG(?:E|T)|VCL(?:E|S|T|Z)|VCM(?:LA)|VLD(?:1|2|3|4|R)|VNM(?:UL)|VOR(?:N|R)|VPM(?:AX|IN)|VQA(?:BS|DD)|VQS(?:UB)|VRS(?:RA|UBHN)|VSR(?:A|I)|VST(?:1|2|3|4|R)|VSU(?:DOT)|VTB(?:L|X)|VUS(?:DOT|MMLA)|VA(?:ND)|VB(?:SL)|VC(?:ADD|EQ|NT)|VD(?:IV|OT|UP)|VE(?:OR|XT)|VH(?:ADD|SUB)|VM(?:MLA|RS|SR|VN)|VN(?:EG)|VP(?:OP|USH)|VQ(?:NEG)|VR(?:ADDHN|HADD)|VS(?:DOT|LI|MMLA|QRT|WP)|VT(?:RN|ST)|VU(?:DOT|MMLA|ZP)|V(?:INS|JCVT|ZIP))(\\w{2})?(?:\\.([IPSU]?8|[IPSUF]?16|[ISUF]?32|[IPSU]?64))?(?-i)\\b",
			"name": "support.function.mnemonic.simd.arm-ual",
			"captures": {
				"1": {
					"name": "keyword.condition_code.arm-ual",
					"patterns": [
						{
							"include": "#conditions"
						}
					]
				},
				"2": {
					"name": "entity.name.type.arm-ual"
				}
			}
		},
		{
			"match": "\\.(?i)(globl|global|extern|weak|macro|endm|purgem|section|text|data|bss|arm|align|balign|irp|rept|endr|(un)?req|error|short|(end)?func|hidden|type|cpu|fpu|arch|code|syntax|altmacro|object_arch|thumb(_set)?|set|pragma|undef|line|get)(?-i)\\b",
			"name": "keyword.control.directive.arm-ual"
		},
		{
			"match": "\\.(?i)(asci[iz]|dc(?:\\.[abdlswx])?|dcb(?:\\.[bdlswx])?|ds(?:\\.[bdlpswx])?|double|float|single|hword|int|octa|quad|short|sleb128|uleb128|word|long|byte|[248]byte|string(?:8|16|32|64)?)\\b",
			"name": "keyword.control.directive.emit.arm-ual"
		},
		{
			"match": "\\b\\=",
			"name": "keyword.control.evaluation"
		},
		{
			"match": "\\b(?i)nop(\\w+)?(?-i)\\b",
			"name": "comment.nop.arm-ual",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#conditions"
						}
					]
				}
			}
		},
		{
			"match": "\\[[ \\t]*(\\w+),[ \\t]*([a-zA-Z0-9#-_]+)[ \\t]*\\]!?",
			"name": "storage.memaddress.arm-ual",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#registers"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#numerics"
						},
						{
							"include": "#registers"
						},
						{
							"include": "#variables"
						}
					]
				}
			}
		},
		{
			"name": "storage.stack.arm-ual",
			"begin": "\\{\\h*",
			"end": "\\h*\\}\\^?",
			"patterns": [
				{
					"include": "#registers_list"
				}
			]
		},
		{
			"include": "#registers"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"match": "([;@]|//|#).*$",
					"name": "comment.arm-ual"
				},
				{
					"begin": "\\/\\*",
					"beginCaptures": {
						"0": {
							"name": "comment.begin.arm-ual"
						}
					},
					"endCaptures": {
						"0": {
							"name": "comment.end.arm-ual"
						}
					},
					"end": "\\*\\/",
					"name": "comment.arm-ual"
				}
			]
		},
		"conditions": {
			"patterns": [
				{
					"match": "ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al",
					"name": "keyword.condition_code.arm-ual"
				}
			]
		},
		"numerics": {
			"patterns": [
				{
					"match": "#?-?(0x|&)[0-9a-fA-F_]+\\b",
					"name": "constant.numeric.hex.arm-ual"
				},
				{
					"match": "#?[0-9]+\\b",
					"name": "constant.numeric.dec.arm-ual"
				},
				{
					"match": "#?0b[01]+\\b",
					"name": "constant.numeric.bin.arm-ual"
				}
			]
		},
		"registers": {
			"patterns": [
				{
					"match": "\\b(?i)([rcp]([0-9]|1[0-5])|[xwbhsdq]([0-9]|1[0-9]|2[0-9]|3[0-1])|wzr|xzr|wsp|fpsr|fpcr|a[1-4]|v([0-9]|1[0-9]|2[0-9]|3[0-1])\\.(16b|8[b|h]|4[s|h]|2[s|d])|sl|sb|fp|ip|sp|lr|(c|s)psr(_c)?|pc|fpsid|fpscr|fpexc|APSR_nzcv|sy)(?-i)(!|\\b)",
					"name": "storage.register.arm-ual"
				}
			]
		},
		"registers_list": {
			"patterns": [
				{
					"match": "(\\w+)(?:\\h*\\-\\h*(\\w+))?(?:,\\h*([a-zA-Z0-9,\\-\\h]+))?",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#registers"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#registers"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#registers_list"
								}
							]
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.arm-ual",
					"begin": "\"",
					"end": "\""
				},
				{
					"match": "\\'\\S\\'",
					"name": "string.char.arm-ual"
				},
				{
					"name": "invalid.illegal.string.arm-ual",
					"match": "\"[^\"]+$"
				},
				{
					"name": "invalid.illegal.char.arm-ual",
					"match": "\\'\\S{2,}\\'"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\b|#)-?[a-zA-Z_][0-9a-zA-Z_]*\\b",
					"name": "variable.named.arm-ual"
				}
			]
		}
	}
}
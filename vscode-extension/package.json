{
    "name": "code4arm",
    "publisher": "ondryaso",
    "displayName": "Code4Arm",
    "description": "Arm Unified Assembly Language support",
    "version": "0.0.1",
    "engines": {
        "vscode": "^1.63.0"
    },
    "dependencies": {
        "vscode-languageclient": "^7.0.0",
        "@microsoft/signalr": "^6.0.4",
        "net": "^1.0.2"
    },
    "categories": [
        "Programming Languages"
    ],
    "main": "./out/main.js",
    "contributes": {
        "commands": [
            {
                "command": "code4arm.refreshConnection",
                "title": "Refresh Code4Arm connection"
            },
            {
                "command": "code4arm.labelAndReferences",
                "title": "Go to label and find references"
            }
        ],
        "languages": [
            {
                "id": "arm-ual",
                "aliases": [
                    "Arm UAL",
                    "arm-ual"
                ],
                "extensions": [
                    ".s",
                    ".S"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "arm-ual",
                "scopeName": "source.arm-ual",
                "path": "./syntaxes/arm-ual.tmLanguage.json"
            }
        ],
        "semanticTokenTypes": [
            {
                "id": "instruction",
                "superType": "function",
                "description": "An Arm UAL instruction mnemonic."
            },
            {
                "id": "directive",
                "superType": "keyword",
                "description": "An assembler directive."
            },
            {
                "id": "shift_type",
                "superType": "keyword",
                "description": "An Arm UAL shift type (LSL/LSR/ASR/ROR/RRX)."
            },
            {
                "id": "register",
                "superType": "variable",
                "description": "An Arm register."
            },
            {
                "id": "condition_code",
                "superType": "decorator",
                "description": "An Arm UAL condition code appended to an instruction mnemonic."
            },
            {
                "id": "sets_flags_flag",
                "superType": "decorator",
                "description": "An Arm UAL flag appended to an instruction mnemonic that controls if the instruction sets processor flags."
            },
            {
                "id": "vector_data_type",
                "superType": "decorator",
                "description": "An ARM UAL vector data type flag."
            },
            {
                "id": "instruction_size_qualifier",
                "superType": "decorator",
                "description": "An ARM UAL instruction encoding size qualifier."
            }
        ],
        "semanticTokenModifiers": [
            {
                "id": "conditional",
                "description": "Marks an instruction that is executed conditionally."
            },
            {
                "id": "sets_flags",
                "description": "Marks an instruction that controls if the instruction sets processor flags."
            },
            {
                "id": "vector_instruction",
                "description": "Marks a SIMD/FP Arm UAL instruction."
            },
            {
                "id": "vector_register",
                "description": "Marks a SIMD/FP register."
            }
        ],
        "semanticTokenScopes_": [
            {
                "language": "arm-ual",
                "scopes": {
                    "instruction": [
                        "support.function.mnemonic.arm-ual"
                    ],
                    "directive": [
                        "keyword.control.directive.arm-ual"
                    ],
                    "register": [
                        "storage.register.arm-ual"
                    ],
                    "condition_code": [
                        "keyword.condition_code.arm-ual"
                    ],
                    "sets_flags_flag": [
                        "keyword.set_flags.arm-ual"
                    ],
                    "instruction_size_qualifier": [
                        "keyword.qualifier.arm-ual"
                    ],
                    "vector_data_type": [
                        "entity.name.type.arm-ual"
                    ]
                }
            }
        ],
        "configuration": {
            "title": "Code4Arm",
            "properties": {
                "code4arm.showCodeLens": {
                    "description": "Show CodeLens over function labels.",
                    "type": "boolean",
                    "default": true
                },
                "code4arm.instructionFilter": {
                    "description": "Controls which instructions are suggested in code completions.",
                    "type": "string",
                    "default": "Basic",
                    "enum": [
                        "Basic",
                        "Uncommon",
                        "Advanced"
                    ],
                    "enumDescriptions": [
                        "Only the most basic instructions, including arithmetic, logic and data manipulation instructions.",
                        "Basic instructions with addition of less frequently used arithmetic instructions.",
                        "All instructions, including the system-level ones."
                    ]
                },
                "code4arm.instructionBlacklist": {
                    "description": "Prohibits specified instructions from showing up in code completions.",
                    "type": "array",
                    "default": []
                },
                "code4arm.showUncommonMnemonicVariants": {
                    "markdownDescription": "Show specific and less frequently used variants of mnemonics, e.g. `ADD SP, #<const>`.",
                    "type": "boolean",
                    "default": false
                },
                "code4arm.showSimdInstructions": {
                    "markdownDescription": "Suggest SIMD/FP instructions in code completions.",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "configurationDefaults": {
            "[arm-ual]": {
                "editor.semanticHighlighting.enabled": true
            },
            "editor.semanticTokenColorCustomizations": {
                "enabled": true,
                "rules": {
                    "directive": "#be5d82",
                    "condition_code": "#1886e0",
                    "sets_flags_flag": "#0ac77ec2",
                    "vector_data_type": "#5236f1",
                    "instruction_size_qualifier": "#5a5a5a",
                    "label": "#e2a129"
                }
            }
        },
        "breakpoints": [
            {
                "language": "arm-ual"
            }
        ],
        "debuggers": [
            {
                "type": "code4arm-runtime",
                "label": "Code4Arm Emulator & Debugger",
                "runtime": "node",
                "languages": ["arm-ual"],
                "configurationAttributes": {
                    "launch": {
                        "required": [],
                        "properties": {
                            "sourceDirectory": {
                                "type": "string",
                                "description": "A directory to use all *.s/*.S assembly source files from to link to a single executable.",
                                "default": "${workspaceFolder}"
                            },
                            "sourceFiles": {
                                "type": "array",
                                "description": "An array of source file names, in linking order."
                            },
                            "debuggerOptions": {
                                "type": "object",
                                "description": "Debugger-related options (overrides extension configuration),",
                                "properties": {
                                    "enableAutomaticDataVariables": {
                                        "type": "boolean",
                                        "description": "Show recognized data section symbols as Variables."
                                    },
                                    "enableStackVariables": {
                                        "type": "boolean",
                                        "description": "Show on-stack data as Variables."
                                    },
                                    "enableRegistersVariables": {
                                        "type": "boolean",
                                        "description": "Show general-purpose registers as Variables."
                                    },
                                    "enableSimdVariables": {
                                        "type": "boolean",
                                        "description": "Show SIMD/FP registers as Variables."
                                    },
                                    "enableControlVariables": {
                                        "type": "boolean",
                                        "description": "Show APSR (Application Processor State Register) and PC (Program Counter/R15) as Variables."
                                    },
                                    "enableExtendedControlVariables": {
                                        "type": "boolean",
                                        "description": "Show CPSR, FPEXC and FPSCR as Variables."
                                    },
                                    "variableNumberFormat": {
                                        "type": "string",
                                        "enum": ["Decimal", "Hex", "Binary", "Float"],
                                        "default": "Decimal",
                                        "description": "The format to show Variable values in."
                                    },
                                    "registersSubtypes": {
                                        "type": "array",
                                        "description": "Controls what child Variables that represent a register's value split into smaller data types will be created for register Variables.",
                                        "items": {
                                            "type": "string",
                                            "enum": ["ByteU", "ByteS", "CharAscii", "ShortU", "ShortS", "IntU", "IntS", "Float"],
                                            "enumDescriptions": [
                                                "unsigned bytes (8-bit integers)",
                                                "signed bytes (8-bit integers)",
                                                "ASCII characters",
                                                "unsigned shorts (16-bit integers)",
                                                "signed shorts (16-bit integers)",
                                                "unsigned int (32-bit integer)",
                                                "signed int (32-bit integer)",
                                                "float (32-bit IEEE 754 floating point number)"
                                            ]
                                        }
                                    },
                                    "stackVariablesSubtypes": {
                                        "type": "array",
                                        "description": "Controls what child Variables that represent an on-stack value split into smaller data types will be created for stack Variables.",
                                        "items": {
                                            "type": "string",
                                            "enum": ["ByteU", "ByteS", "CharAscii", "ShortU", "ShortS", "IntU", "IntS", "Float"],
                                            "enumDescriptions": [
                                                "unsigned bytes (8-bit integers)",
                                                "signed bytes (8-bit integers)",
                                                "ASCII characters",
                                                "unsigned shorts (16-bit integers)",
                                                "signed shorts (16-bit integers)",
                                                "unsigned int (32-bit integer)",
                                                "signed int (32-bit integer)",
                                                "float (32-bit IEEE 754 floating point number)"
                                            ]
                                        }
                                    },
                                    "showFloatIeeeSubvariables": {
                                        "type": "boolean",
                                        "description": "Show decomposition into sign, exponent and mantissa for float and double Variables."
                                    },
                                    "topSimdRegistersLevel": {
                                        "type": "string",
                                        "description": "Controls the largest class of SIMD/FP registers that will be shown as Variables.",
                                        "enum": ["S32", "D64", "Q128"],
                                        "enumDescriptions": [
                                            "S registers (32-bit vector/float registers S0 to S15)",
                                            "D registers (64-bit vector/double registers D0 to D31)",
                                            "Q registers (128-bit vector registers Q0 to Q15)"
                                        ]
                                    },
                                    "simdRegistersOptions": {
                                        "type": "object",
                                        "description": "Controls the behaviour of SIMD/FP register Variables.",
                                        "properties": {
                                            "dSubtypes": {
                                                "type": "array",
                                                "description": "Controls what child Variables that represent a register's value split into smaller data types will be created for D-register Variables.",
                                                "items": {
                                                    "type": "string",
                                                    "enum": ["ByteU", "ByteS", "CharAscii", "ShortU", "ShortS", "IntU", "IntS", "LongU", "LongS", "Float", "Double"],
                                                    "enumDescriptions": [
                                                        "unsigned bytes (8-bit integers)",
                                                        "signed bytes (8-bit integers)",
                                                        "ASCII characters",
                                                        "unsigned shorts (16-bit integers)",
                                                        "signed shorts (16-bit integers)",
                                                        "unsigned ints (32-bit integers)",
                                                        "signed ints (32-bit integers)",
                                                        "unsigned long (64-bit integer)",
                                                        "signed long (64-bit integer)",
                                                        "floats (32-bit IEEE 754 floating point numbers)",
                                                        "double (64-bit IEEE 754 floating point number)"
                                                    ]
                                                }
                                            },
                                            "sSubtypes": {
                                                "type": "array",
                                                "description": "Controls what child Variables that represent a register's value split into smaller data types will be created for S-register Variables.",
                                                "items": {
                                                    "type": "string",
                                                    "enum": ["ByteU", "ByteS", "CharAscii", "ShortU", "ShortS", "IntU", "IntS", "Float"],
                                                    "enumDescriptions": [
                                                        "unsigned bytes (8-bit integers)",
                                                        "signed bytes (8-bit integers)",
                                                        "ASCII characters",
                                                        "unsigned shorts (16-bit integers)",
                                                        "signed shorts (16-bit integers)",
                                                        "unsigned int (32-bit integer)",
                                                        "signed int (32-bit integer)",
                                                        "float (32-bit IEEE 754 floating point number)"
                                                    ]
                                                }
                                            },
                                            "showD": {
                                                "type": "boolean",
                                                "description": "Show D-registers as child Variables in Q-register Variables."
                                            },
                                            "showS": {
                                                "type": "boolean",
                                                "description": "Show S-registers as child Variables in D-register Variables."
                                            },
                                            "dIeeeSubvariables": {
                                                "type": "boolean",
                                                "description": "Show decomposition into sign, exponent and mantissa for D-register Variables."
                                            },
                                            "sIeeeSubvariables": {
                                                "type": "boolean",
                                                "description": "Show decomposition into sign, exponent and mantissa for S-register Variables."
                                            },
                                            "preferFloatRendering": {
                                                "type": "boolean",
                                                "description": "Show D- and S- register's values as floating-point numbers."
                                            }
                                        }
                                    },
                                    "cStringMaxLength": {
                                        "type": "number",
                                        "description": "Maximum length of null-terminated C-strings (in bytes)."
                                    },
                                    "cStringEncoding": {
                                        "type": "string",
                                        "description": "Encoding to interpret null-terminated C-strings in.",
                                        "enum": [ "utf-8", "us-ascii", "utf-16", "unicodeFFFE", "utf-32", "utf-32BE", "iso-8859-1" ]
                                    }
                                }
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "code4arm-runtime",
                        "request": "launch",
                        "name": "Code4Arm: Assemble, link and debug all assembly files",
                        "sourceDirectory": "${workspaceFolder}"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Code4Arm: All files",
                        "description": "A new configuration for debugging an Arm executable linked together from all source files in the workspace folder.",
                        "body": {
                            "type": "code4arm-runtime",
                            "request": "launch",
                            "name": "Code4Arm: Assemble, link and debug all assembly files",
                            "sourceDirectory": "^\\${workspaceFolder}"
                        }
                    }
                ]
            }
        ]
    },
    "activationEvents": [
        "onLanguage:arm-ual",
        "onDebugResolve:code4arm-runtime",
        "onDebugInitialConfigurations"
    ],
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^9.0.0",
        "@types/node": "14.x",
        "@types/vscode": "^1.63.0",
        "@vscode/debugadapter": "^1.55.1",
        "@typescript-eslint/eslint-plugin": "^5.9.1",
        "@typescript-eslint/parser": "^5.9.1",
        "@vscode/test-electron": "^2.0.3",
        "eslint": "^8.6.0",
        "glob": "^7.2.0",
        "mocha": "^9.1.3",
        "typescript": "^4.5.4"
    }
}
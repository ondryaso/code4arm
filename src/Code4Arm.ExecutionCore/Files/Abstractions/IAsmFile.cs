// IAsmFile.cs
// 
// This file is a part of project Code4Arm, created for a thesis "Simulation of an Arm processor for the education
// of programming in assembler".
// Copyright (c) 2022 Ondřej Ondryáš <xondry02@stud.fit.vutbr.cz>
// 
// This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program.
// If not, see <https://www.gnu.org/licenses/>.

namespace Code4Arm.ExecutionCore.Files.Abstractions;

/// <summary>
/// An abstraction over an assembly source file. It provides a way to ensure the source file is stored in the filesystem
/// so that it can be processed by external tools.
/// </summary>
public interface IAsmFile : IEquatable<IAsmFile>
{
    /// <summary>
    /// The workspace-relative name of this file.
    /// </summary>
    string Name { get; }

    /// <summary>
    /// The current version of this file.
    /// </summary>
    /// <remarks>
    /// The <see cref="Version"/> property is used to detect changes. This is used to cache previously assembled object
    /// files if their sources have not changed.
    /// </remarks>
    int Version { get; }
    
    /// <summary>
    /// The path of the file on the client side. If null, the file not is generated by the service when making an executable
    /// and it's not present at the client.
    /// </summary>
    string? ClientPath { get; }

    /// <summary>
    /// The make target this file belongs to.
    /// </summary>
    IAsmMakeTarget? Project { get; }

    /// <summary>
    /// Asynchronously ensures that this file exists in the filesystem and returns a disposable container over its location.
    /// </summary>
    /// <remarks>
    /// A call to <see cref="LocateAsync"/> may simply return a filesystem file or it may, e.g., save a file from
    /// a database to a temporary location. When the caller stops using this file, it should dispose the corresponding
    /// <see cref="ILocatedFile"/>, which would delete the temporary file.
    /// </remarks>
    /// <returns>A disposable filesystem path pointing to this file.</returns>
    ValueTask<ILocatedFile> LocateAsync();
}
